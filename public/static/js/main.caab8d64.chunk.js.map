{"version":3,"sources":["assets/logo.jpg","queries/charactersQueries.js","components/CharacterListItem.js","components/CharactersList.js","components/CharacterListContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","getCharactersQuery","gql","_templateObject","CharacterListItem","_ref","_ref$character","character","name","id","description","_ref$character$thumbn","thumbnail","path","extension","imagePath","concat","react_default","a","createElement","react","className","src","alt","CharactersList","lib_default","dataLength","this","props","characters","length","next","onLoadMore","hasMore","loader","map","components_CharacterListItem","key","Component","CharacterListContainer","state","offset","react_apollo_esm","query","variables","loading","error","data","fetchMore","console","log","components_CharactersList","entries","updateQuery","prev","_ref2","fetchMoreResult","Object","assign","toConsumableArray","client","ApolloClient","uri","App","logo","components_CharacterListContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8iBCExC,IAAMC,QAAqBC,GAAHC,sBCeTC,EAfW,SAAAC,GAA2E,IAAAC,EAAAD,EAAzEE,UAAiBC,GAAwDF,EAA5DG,GAA4DH,EAAxDE,MAAME,EAAkDJ,EAAlDI,YAAkDC,EAAAL,EAArCM,UAAYC,EAAyBF,EAAzBE,KAAMC,EAAmBH,EAAnBG,UAE1EC,EAAS,GAAAC,OAAMH,EAAN,qBAAAG,OAA8BF,GAE7C,OACEG,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uBACbJ,EAAAC,EAAAC,cAAA,OAAKG,IAAKP,EAAWQ,IAAG,GAAAP,OAAKR,EAAL,iBACxBS,EAAAC,EAAAC,cAAA,MAAIE,UAAU,kBAAkBb,GAChCS,EAAAC,EAAAC,cAAA,KAAGE,UAA2B,KAAhBX,EAAqB,cAAgB,MAAwB,KAAhBA,EAAqBA,EAArB,4BAAAM,OAA+DR,OCUnHgB,mLAfX,OACEP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CACEQ,WAAYC,KAAKC,MAAMC,WAAWC,OAClCC,KAAMJ,KAAKC,MAAMI,WACjBC,SAAS,EACTC,OAAQjB,EAAAC,EAAAC,cAAA,yBAEPQ,KAAKC,MAAMC,WAAWM,IAAI,SAAC5B,GAAD,OACzBU,EAAAC,EAAAC,cAACiB,EAAD,CAAmBC,IAAK9B,EAAUE,GAAIF,UAAWA,cAV9B+B,aCmCdC,6MAjCbC,MAAQ,CACNC,OAAQ,2EAGR,OACExB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOC,MAAO1C,EAAoB2C,UAAW,CAACH,OAAQd,KAAKa,MAAMC,SAC9D,SAAApC,GAAyC,IAAtCwC,EAAsCxC,EAAtCwC,QAASC,EAA6BzC,EAA7ByC,MAAOC,EAAsB1C,EAAtB0C,KAAMC,EAAgB3C,EAAhB2C,UACxB,OAAGH,EAAgB5B,EAAAC,EAAAC,cAAA,yBAChB2B,GAAOG,QAAQC,IAAIJ,GAEpB7B,EAAAC,EAAAC,cAACgC,EAAD,CACEtB,WAAYkB,EAAKlB,WACjBuB,QAASL,EAAKlB,YAAc,GAC5BG,WAAY,kBACVgB,EAAU,CACRJ,UAAW,CACTH,OAAQM,EAAKlB,WAAWC,QAE5BuB,YAAa,SAACC,EAADC,GAA+B,IAAtBC,EAAsBD,EAAtBC,gBACpB,OAAKA,EACEC,OAAOC,OAAO,GAAIJ,EAAM,CAC7BzB,WAAU,GAAAb,OAAAyC,OAAAE,EAAA,EAAAF,CAAMH,EAAKzB,YAAX4B,OAAAE,EAAA,EAAAF,CAA0BD,EAAgB3B,eAFzByB,kBApBVhB,aCG/BsB,EAAS,IAAIC,IAAa,CAC9BC,IAAK,aAiBQC,MAdf,WACE,OACE9C,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAgBkB,OAAQA,GACtB3C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAA,OAAKG,IAAK0C,IAAMzC,IAAI,cAAcF,UAAU,SAC5CJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,4BACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,sBAAd,cACAJ,EAAAC,EAAAC,cAAC8C,EAAD,UCPUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.caab8d64.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7ae20c7c.jpg\";","import gql from 'graphql-tag';\n\nconst getCharactersQuery = gql `\n  query getCharacters($offset: Int) {\n    characters(offset: $offset) {\n      id\n      name\n      description\n      thumbnail {\n        path\n        extension\n      }\n    }\n  }\n`;\n\nexport { getCharactersQuery };","import React, { Fragment } from 'react';\n\nconst CharacterListItem = ({character: { id, name, description, thumbnail:{ path, extension} }} ) => {\n\n  const imagePath = `${path}/portrait_xlarge.${extension}`;\n\n  return (\n    <Fragment>\n      <div className=\"character-list-item\">\n        <img src={imagePath} alt={`${name}'s portrait`}/>\n        <h4 className=\"text-pm c-name\">{name}</h4>\n        <p className={description === \"\" ? \"text-orange\" : null }>{description !== \"\" ? description : `*Missing description for ${name}`}</p>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default CharacterListItem;","import React, { Component } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport CharacterListItem from './CharacterListItem';\n\nclass CharactersList extends Component {\n  render() {\n    return (\n      <InfiniteScroll\n        dataLength={this.props.characters.length}\n        next={this.props.onLoadMore}\n        hasMore={true}\n        loader={<h4>Loading...</h4>}\n      >\n        {this.props.characters.map((character) => (\n          <CharacterListItem key={character.id} character={character} />\n        ))}\n      </InfiniteScroll>\n    );\n  }\n}\n\nexport default CharactersList;\n","import React, { Component } from 'react';\nimport { Query } from 'react-apollo';\nimport { getCharactersQuery } from '../queries/charactersQueries'; \nimport CharacterList from './CharactersList';\n\nclass CharacterListContainer extends Component {\n  state = {\n    offset: 0 // offset num to pass when querying for characters\n  }\n  render() {\n    return (\n      <Query query={getCharactersQuery} variables={{offset: this.state.offset}}>\n        {({ loading, error, data, fetchMore }) => {\n          if(loading) return <h4>Loading...</h4>;\n          if(error) console.log(error);\n          return (\n            <CharacterList \n              characters={data.characters} \n              entries={data.characters || []}\n              onLoadMore={() =>\n                fetchMore({\n                  variables: {\n                    offset: data.characters.length\n                  },\n                updateQuery: (prev, { fetchMoreResult }) => {\n                  if (!fetchMoreResult) return prev;\n                  return Object.assign({}, prev, {\n                    characters: [...prev.characters, ...fetchMoreResult.characters]\n                  });\n                }})\n              }\n            />\n          )\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default CharacterListContainer;","import React from 'react';\nimport './App.css';\nimport logo from './assets/logo.jpg';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport CharacterListContainer from './components/CharacterListContainer';\n\n// apollo client setup\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App bg\">\n        <img src={logo} alt=\"Marvel Logo\" className=\"logo\" />\n        <div className=\"character-list-container\">\n          <h1 className=\"text-white text-pm\">Characters</h1>\n          <CharacterListContainer/>\n        </div>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}